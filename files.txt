./src/pages/BooksPage.tsx
import type { Book } from '@/types';
import type { Column } from '@/types/table';
import { GenericPage } from './GenericPage';

const columns: Column<Book>[] = [
  { key: 'id', isSortable: true },
  { key: 'title', isSortable: true },
  { key: 'author', isSortable: true },
  { key: 'year', isSortable: true },
];

export default function BooksPage() {
  return <GenericPage<Book> title="Books" resource="books" columns={columns} />;
}
./src/pages/UsersPage.tsx
import type { User } from '@/types';
import type { Column } from '@/types/table';
import { GenericPage } from './GenericPage';
import { formatAddress } from '@/utils/address';

const columns: Column<User>[] = [
  { key: 'id', isSortable: true },
  { key: 'name', isSortable: true },
  { key: 'username', label: 'User name', isSortable: true },
  { key: 'email', label: 'e-mail', isSortable: true },
  { key: 'phone' },
  { key: 'website' },
  {
    key: 'address',
    render: (user) => formatAddress(user.address),
  }
];

export default function UsersPage() {
  return <GenericPage<User> title="Users" resource="users" columns={columns} />;
}
./src/pages/GenericPage.tsx
// src/pages/GenericPage.tsx
import { useMemo, useState } from "react";
import type { Column } from "@/types/table";
import { Table } from "@/shared/ui/table/Table";
import { TableSearch } from "@/shared/ui/table/TableSearch";
import type { HasId } from "@/types";
import { Spinner } from "@/shared/ui/Spinner";
import { ErrorAlert } from "@/shared/ui/ErrorAlert";
import { useRepoData } from "@/core/hooks/useRepoData";

type GenericPageProps<T extends HasId> = {
  title: string;
  resource: string;
  columns: Column<T>[];
};

export function GenericPage<T extends HasId>({
  title,
  resource,
  columns,
}: GenericPageProps<T>) {
  const { data, loading, error, reload } = useRepoData<T>(resource);
  const [query, setQuery] = useState("");

  const filtered = useMemo(() => {
    const q = query.trim().toLowerCase();
    if (!q) return data;
    return data.filter((row) => JSON.stringify(row).toLowerCase().includes(q));
  }, [data, query]);

  const errorMsg = error instanceof Error ? error.message : error ? String(error) : "";

  return (
    <div className="p-6 space-y-4">
      <div className="flex items-center justify-between gap-3">
        <h1 className="text-2xl font-semibold">{title}</h1>
        <TableSearch value={query} onChange={setQuery} disabled={loading} />
      </div>

      {error && <ErrorAlert message={errorMsg} onRetry={reload} />}

      {loading ? (
        <Spinner label="Loading…" />
      ) : (
        <Table<T> data={filtered} columns={columns} />
      )}
    </div>
  );
}
./src/pages/HomePage.tsx
export default function HomePage() {
  return (
    <div className="mx-auto max-w-4xl px-4 py-10 text-center">
      <h1 className="text-3xl font-bold tracking-tight text-gray-900">
        Practical TypeScript Application Project
      </h1>
      <p className="mt-3 text-lg text-gray-600">
        A mini catalog built to practice type safety, generics, and architecture with TypeScript + React.
      </p>
    </div>
  );
}
./src/pages/CarsPage.tsx
import type { Car } from '@/types';
import type { Column } from '@/types/table';
import { GenericPage } from './GenericPage';

const columns: Column<Car>[] = [
  { key: 'id', isSortable: true },
  { key: 'brand', isSortable: true },
  { key: 'model', isSortable: true },
  { key: 'year', isSortable: true },
  {
    key: 'mileage',
    label: 'Mileage',
    render: (c) => `${c.mileage.toLocaleString()} km`,
    isSortable: true
  },
  {
    key: 'fuelType',
    label: 'Fuel Type',
    render: (c) => c.fuelType.charAt(0).toUpperCase() + c.fuelType.slice(1),
    isSortable: true
  },
  {
    key: 'isUsed',
    label: 'Condition',
    render: (c) => (
      <span
        className={`px-2 py-1 rounded-full text-xs font-medium ${
          c.isUsed ? 'bg-yellow-100 text-yellow-800' : 'bg-green-100 text-green-800'
        }`}
      >
        {c.isUsed ? 'Used' : 'New'}
      </span>
    ),
    isSortable: true
  },
];

export default function CarsPage() {
  return <GenericPage<Car> title="Cars" resource="cars" columns={columns} />;
}
./src/pages/RecipesPage.tsx
import type { Recipe } from '@/types';
import type { Column } from '@/types/table';
import { GenericPage } from './GenericPage';

const columns: Column<Recipe>[] = [
  { key: 'id', isSortable: true },
  { key: 'name', isSortable: true },
  { key: 'ingredients' },
  { key: 'instructions' },
  { key: 'cookTimeMinutes', label: 'Cook time minutes' },
  { key: 'servings' },
  { key: 'cuisine' },
  { key: 'caloriesPerServing', label: 'Calories per serving' },
  { key: 'rating' },
  { key: 'mealType' },
];

export default function RecipesPage() {
  return <GenericPage<Recipe> title="Recipes" resource="recipes" columns={columns} />;
}
./src/pages/PaintingsPage.tsx
import type { Painting } from '@/types';
import type { Column } from '@/types/table';
import { GenericPage } from './GenericPage';

const columns: Column<Painting>[] = [
  { key: 'id', isSortable: true },
  { key: 'title', isSortable: true },
  { key: 'artist', isSortable: true },
  { key: 'year', isSortable: true },
  { key: 'style', label: 'Style' },
  {
    key: 'dimensions',
    label: 'Dimensions',
    render: (p) => `${p.dimensions.width}×${p.dimensions.height} cm`,
    isSortable: true,
    sortAccessor: (p) => p.dimensions.width * p.dimensions.height,
  },
  { key: 'location', label: 'Location' },
];

export default function PaintingsPage() {
  return <GenericPage<Painting> title="Paintings" resource="paintings" columns={columns} />;
}


./src/types/book.ts
export interface Book {
  id: number;
  title: string;
  author: string;
  year: number;
}
./src/types/address.ts
export type Address = {
  city: string;
  street: string;
  suite: string;
  zipcode: string;
  geo: {
    lat: string;
    lng: string;
  };
};
./src/types/table.ts
export type Column<T> = {
  key: keyof T;
  label?: string;
  render?: (row: T) => React.ReactNode;
  isSortable?: boolean;
  sortAccessor?: (row: T) => number | string | boolean | Date;
};

./src/types/shared.ts
export type FuelType = 'gasoline' | 'diesel' | 'electric' | 'hybrid';

export type Dimensions = {
  width: number;
  height: number;
};./src/types/car.ts
import type { FuelType } from "./shared";

export interface Car {
  id: number;
  brand: string;
  model: string;
  year: number;
  mileage: number;
  fuelType: FuelType;
  isUsed: boolean;
}
./src/types/recipe.ts
export type Recipe = {
  id: number;
  name: string;
  ingredients: string[];
  instructions: string[];
  cookTimeMinutes: number;
  servings: number;
  cuisine: string;
  caloriesPerServing: number;
  rating: number;
  mealType: string[];
};
./src/types/painting.ts
import type { Dimensions } from "./shared";

export interface Painting {
  id: number;
  title: string;
  artist: string;
  year: number;
  style?: string;
  dimensions: Dimensions;
  location?: string;
}./src/types/index.ts
export * from './book';
export * from './car';
export * from './painting';
export * from './user';
export * from './recipe';

export type HasId = { id: string | number };
./src/types/user.ts
import type { Address } from "./address";

export type User = {
  id: number;
  name: string;
  username: string;
  email: string;
  phone: string;
  website: string;
  address: Address;
};./src/vite-env.d.ts
/// <reference types="vite/client" />
./src/App.tsx
import { NavLink, Route, Routes } from 'react-router-dom';
import BooksPage from '@/pages/BooksPage';
import CarsPage from '@/pages/CarsPage';
import PaintingsPage from '@/pages/PaintingsPage';
import UsersPage from '@/pages/UsersPage';
import HomePage from '@/pages/HomePage';
import Header from '@/components/Header';
import RecipesPage from '@/pages/RecipesPage';

export default function App() {


  return (
    <div className="min-h-screen bg-gray-50">
      <Header />

      <main className="mx-auto max-w-6xl px-4 py-6">
        <section className="bg-white rounded-2xl shadow-sm ring-1 ring-gray-200 p-4 md:p-6">
          <Routes>
            <Route path="/" element={<HomePage />} />
            <Route path="/books" element={<BooksPage />} />
            <Route path="/cars" element={<CarsPage />} />
            <Route path="/paintings" element={<PaintingsPage />} />
            <Route path="/users" element={<UsersPage />} />
            <Route path="/recipes" element={<RecipesPage />} />

            <Route
              path="*"
              element={
                <div className="text-center py-16">
                  <h2 className="text-lg font-medium text-gray-900">Page not found</h2>
                </div>
              }
            />
          </Routes>
        </section>
      </main>

      <footer className="border-t bg-white">
        <div className="mx-auto max-w-6xl px-4 py-6 text-sm text-gray-500">
          © {new Date().getFullYear()} Cataloger. All rights reserved.
        </div>
      </footer>
    </div>
  );
}
./src/components/Header.tsx
import { NavLink } from "react-router-dom";

const routes = [
  { path: "/books", label: "Books" },
  { path: "/cars", label: "Cars" },
  { path: "/paintings", label: "Paintings" },
  { path: "/users", label: "Users" },
  { path: "/recipes", label: "Recipes" },
];

const Header = () => {

  const linkClass = ({ isActive  }: { isActive: boolean }) =>
  `px-3 py-1.5 rounded ${isActive ? 'bg-indigo-600 text-white' : 'text-gray-700 hover:bg-gray-100'}`;

  return (
    <header className="bg-white/80 backdrop-blur sticky top-0 z-10 border-b">
      <div className="mx-auto max-w-6xl px-4 py-4">
        <h1 className="text-xl font-semibold text-gray-900">
          <NavLink to="/">Cataloger Project</NavLink>
        </h1>

        <nav className="mt-4">
          <div className="inline-flex gap-2 rounded-xl bg-white p-1 shadow-sm ring-1 ring-gray-200">
            {routes.map(({ path, label }) => (
              <NavLink key={path} to={path} className={linkClass}>
                {label}
              </NavLink>
            ))}
          </div>
        </nav>
      </div>
    </header>
  );
};

export default Header;
./src/core/hooks/useRepoData.ts
import { useMemo } from "react";
import { makeApiRepository } from "@/core/repo/ApiRepository";
import { useRepoBase } from "./useRepoBase";
import type { HasId } from "@/types";

export function useRepoData<T extends HasId>(resource: string) {
  const repo = useMemo(() => makeApiRepository<T>(resource), [resource]);
  return useRepoBase(repo);
}
./src/core/hooks/useRepoBase.ts
import { useCallback, useEffect, useState } from 'react';
import type { Repository } from '@/core/repo/Repository';
import type { HasId } from '@/types';

export function useRepoBase<T extends HasId>(repo: Repository<T>) {
  const [data, setData] = useState<T[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<Error | null>(null);

  const reload = useCallback(() => {
    setLoading(true);
    setError(null);
    repo.getAll().then(setData).catch(setError).finally(() => setLoading(false));
  }, [repo]);

  useEffect(() => { reload(); }, [reload]);

  return { data, loading, error, repo, reload, setData };
}
./src/core/repo/Repository.ts
export interface Repository<T extends { id: string | number }> {
  getAll(): Promise<T[]>;
  add(item: T): Promise<void>;
  update(id: T["id"], patch: Partial<T>): Promise<void>;
  remove(id: T["id"]): Promise<void>;
}
./src/core/repo/ApiRepository.ts
import type { Repository } from "./Repository";

export function makeApiRepository<T extends { id: string | number }>(
  resource: string
): Repository<T> {
    console.log('resource', resource)
  if (!resource) throw new Error("ApiRepository: resource is required");
  const baseUrl = import.meta.env.VITE_API_URL;
  if (!baseUrl) throw new Error("ApiRepository: base url is missing");

  const base = baseUrl.replace(/\/+$/, "");
  const root = `${base}/${resource}`;

  async function request(input: RequestInfo, init?: RequestInit) {
    const res = await fetch(input, {
      ...init,
      headers: {
        "Content-Type": "application/json",
      },
    });
    if (!res.ok) throw new Error(`API ${res.status} ${res.statusText}`);

    return res;
  }

  return {
    async getAll() {
      const r = await request(root);
      return (await r.json()) as T[];
    },
    async add(item) {
      await request(root, { method: "POST", body: JSON.stringify(item) });
    },
    async update(id, patch) {
      await request(`${root}/${id}`, { method: "PATCH", body: JSON.stringify(patch) });
    },
    async remove(id) {
      await request(`${root}/${id}`, { method: "DELETE" });
    },
  };
}
./src/utils/address.ts
import type { Address } from "@/types/address";

export function formatAddress(address: Address): string {
  return `${address.street}, ${address.suite}, ${address.city}, ${address.zipcode}`;
}
./src/main.tsx
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import { BrowserRouter } from 'react-router-dom';
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </StrictMode>,
)
./src/shared/ui/Spinner.tsx
type SpinnerProps = { className?: string; label?: string };

export function Spinner({ className = "", label }: SpinnerProps) {
  return (
    <div className="flex items-center justify-center py-8">
      <div
        className={`h-5 w-5 animate-spin rounded-full border-2 border-gray-300 border-t-transparent mr-2 ${className}`}
        aria-label={label ?? "Loading"}
      />
      {label && <span className="text-sm text-gray-600">{label}</span>}
    </div>
  );
}
./src/shared/ui/table/Table.tsx
import { useMemo, useState } from 'react';
import type { Column } from '@/types/table';
import type { HasId } from '@/types';

interface TableProps<T extends HasId> {
  data: T[];
  columns: Column<T>[];
}

export function Table<T extends HasId>({ data, columns }: TableProps<T>) {
  const [sortKey, setSortKey] = useState<keyof T | null>(null);
  const [dir, setDir] = useState<'asc' | 'desc'>('asc');

  const normalize = (v: unknown): number | string => {
    if (v instanceof Date) return v.getTime();
    if (typeof v === 'number') return v;
    if (typeof v === 'boolean') return Number(v);
    if (typeof v === 'string') return v.toLowerCase();
    return String(v ?? '').toLowerCase();
  };

  const sorted = useMemo(() => {
    if (!sortKey) return data;
    const activeCol = columns.find(c => String(c.key) === String(sortKey));
    const getVal = (row: T) =>
      activeCol?.sortAccessor
        ? activeCol.sortAccessor(row)
        : row[sortKey];

    return [...data].sort((a, b) => {
      const av = normalize(getVal(a));
      const bv = normalize(getVal(b));
      if (av < bv) return dir === 'asc' ? -1 : 1;
      if (av > bv) return dir === 'asc' ? 1 : -1;
      return 0;
    });
  }, [data, sortKey, dir, columns]);

  const handleHeaderClick = (col: Column<T>) => {
    if (!col.isSortable) return;
    const key = col.key as keyof T;
    if (sortKey !== key) {
      setSortKey(key);
      setDir('asc');
    } else {
      setDir(prev => (prev === 'asc' ? 'desc' : 'asc'));
    }
  };

  const renderArrow = (col: Column<T>) => {
    if (!col.isSortable) return null;
    const active = sortKey === col.key;
    if (!active) return <span aria-hidden className="opacity-40">↕︎</span>;
    return <span aria-hidden>{dir === 'asc' ? '▲' : '▼'}</span>;
  };

  const formatItemValue = (value: T[keyof T]): string => {
    if(Array.isArray(value)) return value.join(',');           
    return String(value ?? '-');
  }

  if (!sorted?.length) return null;

  return (
    <div className="overflow-x-auto">
      <table className="min-w-full bg-white shadow-md rounded-lg overflow-hidden">
        <thead className="bg-gray-100 border-b">
          <tr>
            {columns.map((col) => (
              <th
                key={String(col.key)}
                className={`text-left px-4 py-3 text-sm font-medium text-gray-700 uppercase tracking-wider
                  ${col.isSortable ? 'cursor-pointer select-none' : ''}`}
                onClick={() => handleHeaderClick(col)}
              >
                <span className="inline-flex items-center gap-1">
                  {col.label ?? String(col.key)}
                  {renderArrow(col)}
                </span>
              </th>
            ))}
          </tr>
        </thead>

        <tbody>
          {sorted.length === 0 ? (
            <tr>
              <td className="px-4 py-6 text-sm text-gray-500 italic" colSpan={columns.length}>
                No results
              </td>
            </tr>
          ) : (
            sorted.map((item) => (
              <tr key={item.id} className="even:bg-white odd:bg-gray-50">
                {columns.map(({ key, render }) => (
                  <td key={String(key)} className="px-4 py-3 text-sm text-gray-800">
                    {render ? render(item) : formatItemValue(item[key])}
                  </td>
                ))}
              </tr>
            ))
          )}
        </tbody>
      </table>
    </div>
  );
}
./src/shared/ui/table/TableSearch.tsx
type TableSearchProps = {
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  className?: string;
  disabled?: boolean;
};

export function TableSearch({
  value,
  onChange,
  placeholder = "Search…",
  className = "",
  disabled = false,
}: TableSearchProps) {
  return (
    <div className={`p-2 flex justify-end ${className}`}>
      <input
        value={value}
        onChange={(e) => onChange(e.target.value)}
        placeholder={placeholder}
        disabled={disabled}
        className={`border rounded px-2 py-1 text-sm ${
          disabled ? "opacity-60 cursor-not-allowed" : ""
        }`}
      />
    </div>
  );
}
./src/shared/ui/ErrorAlert.tsx
type ErrorAlertProps = { message: string; onRetry?: () => void };

export function ErrorAlert({ message, onRetry }: ErrorAlertProps) {
  return (
    <div className="flex items-start gap-3 rounded-lg border border-red-200 bg-red-50 px-3 py-2 text-sm text-red-800">
      <span className="mt-0.5">⚠️</span>
      <div className="flex-1">
        <div className="font-medium">Data managing error</div>
        <div className="text-red-700/90">{message}</div>
      </div>
      {onRetry && (
        <button
          onClick={onRetry}
          className="ml-2 rounded-md border border-red-300 bg-white px-2 py-1 text-red-700 hover:bg-red-100"
        >
          Retry
        </button>
      )}
    </div>
  );
}
./vite.config.ts
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from "path"

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "src")
    }
  }
})
